import minifaker from '../src'

test('Test function without locale', () => {
  minifaker.setSeed('testing')
  expect(() => minifaker.setDefaultLocale('alien')).toThrow()
  expect(() => minifaker.firstName()).toThrow() // no default locale error
  expect(minifaker.number()).toBeLessThanOrEqual(1)
  expect(minifaker.number({ float: true }))
  expect(minifaker.boolean())
  expect(minifaker.arrayElement(['one', 'two', 'three']))
  expect(minifaker.imageUrlFromPlaceIMG({ width: 500, height: 500 }))
  expect(minifaker.imageUrlFromPlaceIMG({ width: 500, height: 500, category: 'animals', filter: 'sepia' }))
  expect(minifaker.imageUrlFromPlaceholder({ width: 250 }))
  expect(minifaker.imageUrlFromPlaceholder({ width: 250, height: 200, backColor: 'black', textColor: 'white', textValue: 'minifaker' }))
  expect(minifaker.objectElement({ 'key1': 'value', 'key2': 'value' }))
  expect(() => minifaker.objectElement([])).toThrow()
  expect(minifaker.array(5, (i) => i)).toEqual([0, 1, 2, 3, 4])
  expect(minifaker.ip())
  expect(minifaker.port())
  expect(minifaker.ipv6())
  expect(minifaker.color())
  expect(minifaker.color({ r: 1 }))
  expect(minifaker.macAddress())
  expect(minifaker.macAddress({ separator: '' }))
  expect(minifaker.macAddress({ separator: '.' }))
  expect(minifaker.macAddress({ separator: ' ' }))
  expect(minifaker.macAddress({ separator: '-' }))
  expect(minifaker.macAddress({ transmission: 'multicast', administration: 'laa' }))
  expect(minifaker.macAddress({ transmission: 'unicast', administration: 'uaa' }))
  expect(minifaker.zipCode({ format: '*#A ?#*' }))
  expect(minifaker.latidude())
  expect(minifaker.longitude())
  expect(minifaker.latLong())
  expect(minifaker.creditCardNumber())
  expect(minifaker.creditCardNumber({ provider: 'americanExpress' }))
  expect(minifaker.creditCardNumber({ provider: 'dinersClub' }))
  expect(minifaker.creditCardNumber({ provider: 'discover' }))
  expect(minifaker.creditCardNumber({ provider: 'instapayment' }))
  expect(minifaker.creditCardNumber({ provider: 'jcb' }))
  expect(minifaker.creditCardNumber({ provider: 'laser' }))
  expect(minifaker.creditCardNumber({ provider: 'maestro' }))
  expect(minifaker.creditCardNumber({ provider: 'mastercard' }))
  expect(minifaker.creditCardNumber({ provider: 'solo' }))
  expect(minifaker.creditCardNumber({ provider: 'visa' }))
  expect(minifaker.creditCardCVV())
  expect(minifaker.semver())
  expect(minifaker.date())
  expect(minifaker.date({ from: new Date('2012'), to: new Date('2013') }))
  expect(minifaker.date({ from: new Date('2012-01'), to: new Date('2012-02') }))
  // month 0 is january ??? -> https://stackoverflow.com/questions/2552483/why-does-the-month-argument-range-from-0-to-11-in-javascripts-date-constructor
  expect(minifaker.date({ from: new Date(2012, 0, 1), to: new Date(2012, 0, 5) }))
  expect(minifaker.bitcoinAddress())
  expect(minifaker.fileExt())
  expect(minifaker.dirPath())
  expect(minifaker.mimeType())
  expect(minifaker.hex())
  expect(minifaker.hex(10))

  // Other packages
  expect(minifaker.nanoId.nanoid())
  expect(minifaker.uuid.v4())

  // Password
  expect(minifaker.password())
  expect(minifaker.password({ maxLength: 12, numbers: false, symbols: false }))
  expect(minifaker.password({ minLength: 7, maxLength: 15, numbers: 5, symbols: 2 }))
  expect(minifaker.password({ uppercases: false }))
  expect(minifaker.password({ minLength: 8, maxLength: 8 }))
  expect(minifaker.password({ minLength: 10, symbols: false, uppercases: false }))
  expect(minifaker.password({ lowercases: false, symbols: false }))
})
